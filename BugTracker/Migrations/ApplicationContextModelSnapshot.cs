// <auto-generated />
using System;
using BugTracker.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BugTracker.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BugTracker.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("ActivityMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BugReportId")
                        .HasColumnType("int");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");

                    b.HasDiscriminator<string>("ActivityType").HasValue("Activity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BugTracker.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BugTracker.Models.Authorization.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentityRoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalisedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BugTracker.Models.BugReport", b =>
                {
                    b.Property<int>("BugReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BugReportId"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailsToReproduce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.Property<int>("LocalBugReportId")
                        .HasColumnType("int");

                    b.Property<string>("PersonReporting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramBehaviour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BugReportId");

                    b.HasIndex("ProjectId");

                    b.ToTable("BugReports");
                });

            modelBuilder.Entity("BugTracker.Models.BugReportLink", b =>
                {
                    b.Property<int>("BugReportId")
                        .HasColumnType("int");

                    b.Property<int>("LinkedBugReportId")
                        .HasColumnType("int");

                    b.HasKey("BugReportId", "LinkedBugReportId");

                    b.HasIndex("LinkedBugReportId");

                    b.ToTable("BugReportLinks");
                });

            modelBuilder.Entity("BugTracker.Models.BugState", b =>
                {
                    b.Property<int>("BugStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BugStateId"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BugReportId")
                        .HasColumnType("int");

                    b.Property<int>("StateType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("BugStateId");

                    b.ToTable("BugStates");
                });

            modelBuilder.Entity("BugTracker.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BugReportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<string>("MainText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BugTracker.Models.Milestone", b =>
                {
                    b.Property<int>("MilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MilestoneId"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MilestoneId");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("BugTracker.Models.MilestoneBugReport", b =>
                {
                    b.Property<int>("BugReportId")
                        .HasColumnType("int");

                    b.Property<int>("MilestoneId")
                        .HasColumnType("int");

                    b.HasKey("BugReportId", "MilestoneId");

                    b.HasIndex("MilestoneId");

                    b.ToTable("MilestoneBugReports");
                });

            modelBuilder.Entity("BugTracker.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NextFreeBugReportId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BugTracker.Models.ProjectInvitation.PendingProjectInvitation", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectId", "EmailAddress");

                    b.ToTable("PendingProjectInvitations");
                });

            modelBuilder.Entity("BugTracker.Models.UserBugReport", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BugReportId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BugReportId");

                    b.HasIndex("BugReportId");

                    b.ToTable("UserBugReports");
                });

            modelBuilder.Entity("BugTracker.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("BugTracker.Models.UserSubscription", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BugReportId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BugReportId");

                    b.HasIndex("BugReportId");

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("BugTracker.Models.ActivityBugReport", b =>
                {
                    b.HasBaseType("BugTracker.Models.Activity");

                    b.HasDiscriminator().HasValue("ActivityBugReport");
                });

            modelBuilder.Entity("BugTracker.Models.ActivityBugReportAssigned", b =>
                {
                    b.HasBaseType("BugTracker.Models.Activity");

                    b.Property<string>("AssigneeId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ActivityBugReportAssigned");
                });

            modelBuilder.Entity("BugTracker.Models.ActivityBugReportLink", b =>
                {
                    b.HasBaseType("BugTracker.Models.Activity");

                    b.Property<int>("LinkedBugReportId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ActivityBugReportLink");
                });

            modelBuilder.Entity("BugTracker.Models.ActivityBugReportStateChange", b =>
                {
                    b.HasBaseType("BugTracker.Models.Activity");

                    b.Property<int>("NewBugReportStateId")
                        .HasColumnType("int");

                    b.Property<int>("PreviousBugReportStateId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ActivityBugReportStateChange");
                });

            modelBuilder.Entity("BugTracker.Models.ActivityComment", b =>
                {
                    b.HasBaseType("BugTracker.Models.Activity");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ActivityComment");
                });

            modelBuilder.Entity("BugTracker.Models.ActivityMilestone", b =>
                {
                    b.HasBaseType("BugTracker.Models.Activity");

                    b.Property<int>("MilestoneId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ActivityMilestone");
                });

            modelBuilder.Entity("BugTracker.Models.ActivityMilestoneBugReport", b =>
                {
                    b.HasBaseType("BugTracker.Models.Activity");

                    b.Property<int>("MilestoneId")
                        .HasColumnType("int");

                    b.ToTable("Activities", t =>
                        {
                            t.Property("MilestoneId")
                                .HasColumnName("ActivityMilestoneBugReport_MilestoneId");
                        });

                    b.HasDiscriminator().HasValue("ActivityMilestoneBugReport");
                });

            modelBuilder.Entity("BugTracker.Models.ActivityProject", b =>
                {
                    b.HasBaseType("BugTracker.Models.Activity");

                    b.HasDiscriminator().HasValue("ActivityProject");
                });

            modelBuilder.Entity("BugTracker.Models.BugReport", b =>
                {
                    b.HasOne("BugTracker.Models.Project", null)
                        .WithMany("BugReports")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BugTracker.Models.BugReportLink", b =>
                {
                    b.HasOne("BugTracker.Models.BugReport", "BugReport")
                        .WithMany()
                        .HasForeignKey("BugReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugTracker.Models.BugReport", "LinkedBugReport")
                        .WithMany()
                        .HasForeignKey("LinkedBugReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BugReport");

                    b.Navigation("LinkedBugReport");
                });

            modelBuilder.Entity("BugTracker.Models.MilestoneBugReport", b =>
                {
                    b.HasOne("BugTracker.Models.BugReport", "BugReport")
                        .WithMany("MilestoneBugReports")
                        .HasForeignKey("BugReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Models.Milestone", "Milestone")
                        .WithMany("MilestoneBugReports")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BugReport");

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("BugTracker.Models.ProjectInvitation.PendingProjectInvitation", b =>
                {
                    b.HasOne("BugTracker.Models.Project", "Project")
                        .WithMany("PendingProjectInvitations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BugTracker.Models.UserBugReport", b =>
                {
                    b.HasOne("BugTracker.Models.BugReport", "BugReport")
                        .WithMany("UserBugReports")
                        .HasForeignKey("BugReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Models.ApplicationUser", "User")
                        .WithMany("UserBugReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BugReport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BugTracker.Models.UserRole", b =>
                {
                    b.HasOne("BugTracker.Models.Authorization.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BugTracker.Models.UserSubscription", b =>
                {
                    b.HasOne("BugTracker.Models.BugReport", "BugReport")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("BugReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Models.ApplicationUser", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BugReport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BugTracker.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserBugReports");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("BugTracker.Models.Authorization.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BugTracker.Models.BugReport", b =>
                {
                    b.Navigation("MilestoneBugReports");

                    b.Navigation("UserBugReports");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("BugTracker.Models.Milestone", b =>
                {
                    b.Navigation("MilestoneBugReports");
                });

            modelBuilder.Entity("BugTracker.Models.Project", b =>
                {
                    b.Navigation("BugReports");

                    b.Navigation("PendingProjectInvitations");
                });
#pragma warning restore 612, 618
        }
    }
}
